{"version":3,"sources":["src/Snake.js","src/init.js","index.js"],"names":["Snake","GRID_SIZE","FPS","INTERVAL","AREA_WIDTH","AREA_HEIGHT","area","ctx","now","delta","then","Date","crashed","started","score","snake","x","y","dx","dy","tail","startLength","food","loop","bind","document","getElementById","getContext","calcAreaSize","width","height","fillArea","initialValue","changeDirectionListener","createSnake","requestAnimationFrame","moveSnake","drawSnake","drawFood","checkSnakeLocation","unshift","length","pop","forEach","item","lineWidth","fillStyle","strokeStyle","fillRect","strokeRect","size","Array","keys","_","index","coordinates","push","slice","newFoodPosition","positionFor","coorList","map","t","pos","randomPosition","includes","window","addEventListener","keyCode","min","max","Math","round","random","floor","innerHeight","init","startBtn","pauseBtn","resumeBtn","start","pause","resume"],"mappings":"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","file":"snake-sample.841363f4.map","sourceRoot":"..","sourcesContent":["export default class Snake {\n  constructor() {\n    this.GRID_SIZE = 20\n    this.FPS = 10\n    this.INTERVAL = 1000 / this.FPS\n    this.AREA_WIDTH\n    this.AREA_HEIGHT\n\n    this.area\n    this.ctx\n    this.now\n    this.delta\n\n    this.area\n    this.ctx\n\n    this.now\n    this.delta\n\n    this.then = Date.now()\n    this.crashed = false\n    this.started = false\n    this.score = 0\n\n    this.snake = {\n      x: 100,\n      y: 100,\n      dx: 1,\n      dy: 0,\n      tail: [],\n      startLength: 4\n    }\n  \n    this.food = {\n      x: 160,\n      y: 100\n    }\n\n    this.loop = this.loop.bind(this)\n  }\n\n  init() {\n    this.area = document.getElementById('area')\n    this.ctx = this.area.getContext('2d')\n\n    this.AREA_WIDTH = this.calcAreaSize\n    this.AREA_HEIGHT = this.calcAreaSize\n\n    this.area.width = this.AREA_WIDTH\n    this.area.height = this.AREA_HEIGHT\n\n    this.fillArea()\n  }\n\n  start() {\n    this.started = true\n    this.crashed = false\n\n    this.initialValue()\n    this.changeDirectionListener()\n    this.createSnake(4)\n    this.loop()\n  }\n\n  pause() {\n    this.started = false\n  }\n\n  resume() {\n    this.started = true\n  }\n\n  loop() {\n    if (this.crashed) return\n  \n    requestAnimationFrame(this.loop)\n\n    if (!this.started) return\n\n    this.now = Date.now()\n    this.delta = this.now - this.then\n\n    if (this.delta > this.INTERVAL) {\n      this.then = this.now - (this.delta % this.INTERVAL)\n\n      this.fillArea()\n      this.moveSnake()\n      this.drawSnake()\n      this.drawFood()\n      this.checkSnakeLocation()\n    }\n  }\n\n  moveSnake() {\n    this.snake.x += this.GRID_SIZE * this.snake.dx\n    this.snake.y += this.GRID_SIZE * this.snake.dy\n\n    this.snake.tail.unshift({ x: this.snake.x, y: this.snake.y })\n\n    if (this.snake.tail.length > this.snake.startLength) {\n      this.snake.tail.pop()\n    }\n  }\n\n  drawSnake() {\n    this.snake.tail.forEach(item => {\n      this.ctx.lineWidth = 3\n      this.ctx.fillStyle = 'green'\n      this.ctx.strokeStyle = '#39ff14'\n      this.ctx.fillRect(item.x, item.y, this.GRID_SIZE, this.GRID_SIZE)\n      this.ctx.strokeRect(item.x, item.y, this.GRID_SIZE, this.GRID_SIZE)\n    })\n  }\n\n  drawFood() {\n    this.ctx.lineWidth = 1\n    this.ctx.fillStyle = 'red'\n    this.ctx.strokeStyle = 'darkred'\n    this.ctx.fillRect(this.food.x, this.food.y, this.GRID_SIZE, this.GRID_SIZE)\n    this.ctx.strokeRect(this.food.x, this.food.y, this.GRID_SIZE, this.GRID_SIZE)\n  }\n\n  createSnake(size) {\n    [ ...Array(size).keys() ].forEach((_, index) => {\n      const coordinates = [ this.snake.x - (this.GRID_SIZE * index), this.snake.y, this.GRID_SIZE, this.GRID_SIZE ]\n\n      this.ctx.lineWidth = 3\n      this.ctx.fillStyle = 'green'\n      this.ctx.strokeStyle = '#39ff14'\n      this.ctx.fillRect( ...coordinates )\n      this.ctx.strokeRect( ...coordinates )\n      \n      this.snake.tail.push({ x: this.snake.x - (this.GRID_SIZE * index), y: this.snake.y })\n    })\n  }\n\n  checkSnakeLocation() {\n    if (this.snake.x === 0 || this.snake.x === (this.AREA_WIDTH - this.GRID_SIZE) ||\n        this.snake.y === 0 || this.snake.y === (this.AREA_HEIGHT - this.GRID_SIZE)) {\n      this.crashed = true\n    }\n\n    this.snake.tail.slice(1, this.snake.tail.length).forEach(item => {\n      if (this.snake.tail[0].x === item.x &&\n          this.snake.tail[0].y === item.y) {\n        this.crashed = true\n      }\n    })\n\n    if (this.snake.x === this.food.x && this.snake.y === this.food.y) {\n      this.snake.tail.push({ x: this.food.x, y: this.food.y })\n\n      this.food.x = this.newFoodPosition('x')\n      this.food.y = this.newFoodPosition('y')\n    }\n  }\n\n  newFoodPosition(positionFor) {\n    const coorList = this.snake.tail.map(t => t[positionFor])\n    let pos = this.randomPosition(this.GRID_SIZE, this.AREA_WIDTH - 2 * this.GRID_SIZE)\n\n    while (coorList.includes(pos)) {\n      pos = this.randomPosition(this.GRID_SIZE, this.AREA_WIDTH - 2 * this.GRID_SIZE)\n    }\n\n    return pos\n  }\n\n  changeDirectionListener() {\n    window.addEventListener('keydown', ({ keyCode }) => {\n      if (keyCode === 37 && this.snake.dx !== 1) {\n        this.snake.dx = -1\n        this.snake.dy = 0\n      }\n\n      if (keyCode === 38 && this.snake.dy !== 1) {\n        this.snake.dx = 0\n        this.snake.dy = -1\n      }\n\n      if (keyCode === 39 && this.snake.dx !== -1) {\n        this.snake.dx = 1\n        this.snake.dy = 0\n      }\n\n      if (keyCode === 40 && this.snake.dy !== -1) {\n        this.snake.dx = 0\n        this.snake.dy = 1\n      }\n    })\n  }\n\n  initialValue() {\n    this.snake = {\n      x: 100,\n      y: 100,\n      dx: 1,\n      dy: 0,\n      tail: [],\n      startLength: 4\n    }\n  \n    this.food = {\n      x: 160,\n      y: 100\n    }\n  }\n\n  fillArea() {\n    this.ctx.lineWidth = 10\n    this.ctx.strokeStyle = '#4666FF'\n    this.ctx.fillStyle = '#000'\n    this.ctx.fillRect(0, 0, this.AREA_WIDTH, this.AREA_HEIGHT)\n    this.ctx.strokeRect(0, 0, this.AREA_WIDTH, this.AREA_HEIGHT)\n  }\n\n  randomPosition(min, max) {\n    return Math.round((Math.random() * (max - min) + min) / this.GRID_SIZE) * this.GRID_SIZE\n  }\n\n  get calcAreaSize() {\n    return Math.floor(window.innerHeight / this.GRID_SIZE) * this.GRID_SIZE\n  }\n}\n","import Snake from './Snake'\n\nconst init = () => {\n  const startBtn = document.getElementById('startButton')\n  const pauseBtn = document.getElementById('pauseButton')\n  const resumeBtn = document.getElementById('resumeButton')\n\n  const snake = new Snake()\n\n  snake.init()\n\n  startBtn.addEventListener('click', () => { snake.start() })\n  pauseBtn.addEventListener('click', () => { snake.pause() })\n  resumeBtn.addEventListener('click', () => { snake.resume() })\n}\n\nexport default init","import init from './src/init'\n\nwindow.addEventListener('DOMContentLoaded', init)\n"]}